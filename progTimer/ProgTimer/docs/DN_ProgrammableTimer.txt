DN_ProgrammableTimer.txt
30jan17 ndp
05may17


Design Notes for Programmable Timer board

ref1: ATtiny328PA datasheet
ref2: RD_ProgrammableTimer.txt

Releases:
0.30	2017-26-04	Improved audio code.


Target: ATmega328PA-AU (TQFP-32), 1 MHz, 9600 baud
2032/2025 20mm coin cell 3V or Tripple AAA batterry pack (3.6V/4.5V)

Normally in IDLE mode (0.05ma). Wake-up on Watch Dog (8s) or USART Rx Intr.
EEPROM (1k bytes) holds RTC and Event List.
RS232 COM Port (FTDI/USB) 9600 8N1 no handshake (but available).

Two LEDs (RED and GREEN).
Two Push Button Switches (A & B).
Buzzer (4-5kHz) with mute switch.
Use straight instead of right angle for FTDI. Have to disassemble case to 
connect USB/FTDI serial module program events.

TQFP is fine line, tricky, but not impossble.

Buzzer: PS Series, PS12 (4-5kHz, 3V)..Use PWM.

TIME FORMAT
31,536,000 (01 E1 33 80) minutes per year
Total seconds from Midnight Jan 1 2000
Use <time.h>
typedef uint32_t time_t;
and
    struct tm {
        int8_t          tm_sec; /**< seconds after the minute - [ 0 to 59 ] */
        int8_t          tm_min; /**< minutes after the hour - [ 0 to 59 ] */
        int8_t          tm_hour; /**< hours since midnight - [ 0 to 23 ] */
        int8_t          tm_mday; /**< day of the month - [ 1 to 31 ] */
        int8_t          tm_wday; /**< days since Sunday - [ 0 to 6 ] */
        int8_t          tm_mon; /**< months since January - [ 0 to 11 ] */
        int16_t         tm_year; /**< years since 1900 */
        int16_t         tm_yday; /**< days since January 1 - [ 0 to 365 ] */
        int16_t         tm_isdst; /**< Daylight Saving Time flag */
    };
Use IsoTime format:	YYYY-MM-DD HH:MM:SS (19 char)
	2013-03-23 01:03:52

COMMANDS
'L'	Load list item into RAM. Index: 0-249 (Have 2k RAM. Can store entire list.)
	L <Index> YYYY-MM-DD HH:MM:SN
Example: (21 bytes) Store 2013-03-23 01:03:50 with Note 2 at index 30.
'L' 1E '2' '0' '1' '3' '-' '0' '3' '-' '2' '3' ' ' '0' '1' ':' '0' '3' ':' '5' '2'
Returns 'O' 'K' 0A 0D if accepted or '?' 0A 0D if not.
Converts ASCII into time_t (4 bytes) as list entry.
NOTE: The 1s place of seconds is used to select the tone to be played 0-9.

'R'	Read event list. Returns the event list. NN:Number of entries then 
IsoTime ASCII entries seperated by CR (13).
	NN (19 bytes) CR (19 bytes) CR ...

*'W'	Write list into EEPROM. Copies RAM table into EEPROM.
Returns 'O' 'K' 0D if successful or 'F' 'A' 'I' 'L' 0D if not.

'S'	Set time of day (20 bytes)(see 'L' command)
	S YYYY-MM-DD HH:MM:SS
Returns 'O' 'K' 0D if accepted or '?' 0D if not.

'T'	Get time of day.
Returns YYYY-MM-DD HH:MM:SS 0D or '?' 0D

'C'	Enter Self Check mode
	'C' '-' 'O' 'K' 0A 0D

'D'	Dump EEPROM data
Reads out Tags and Time in ASCII formatted text.
<tag> YYYY-MM-DD HH:MM:SS [YYYY-MM-DD HH:MM:SS]
<tag>
	1	Normal ACK on event. Event time.
	2	Snooze activated. Event time. Final ACK time.
	3	No Action taken within 30 min. Event time.

'E'	Erase EEPROM
	Zeros EEPROM data.
Returns 'E' '-' 'O' 'K' 0A 0D

'V'	Return verson and build date.
	0.20	2017-MAR-11 17:23:22 0D


Process
service_events
service_io_buttons
service_comms
	state IDLE
		check for input char
			yes - switch(command)
			valid command - set parsing state
	state PARSE	
		check for input char
			yes - NULL?
				no - add to string. Max?


Functions
time_t mod_parse(char* str) - NULL terminated string or 22 char max. Return 
0 is not parsed or error.

Audio
Notes and Tones. Need to reconfigure Timer1 as needed.
Tones
0 - Two 250ms 4kHz beeps 500ms apart
1 - Three 250ms 5kHz beeps
2
3
4
5 - Tune (6 notes)
6
7
8
9 - Tune (5 notes)

NOTE: The buttons are only scanned when the unit wakes up OR when a tone/tune 
is playing.

Time Check
On AWAKE - Scan list for Event < LocalTime. If TRUE, trigger Beeps and 
then clear Event on List.

// Return Event tag to select Beep or Tune
uint8_t mod_eventList_check()

Add isPlaying() check before going to sleep again to allow tune to complete.
May need a killBeepTone() function.

On Event
	state = 1

On Event, check if eTemp is true then go to processing, else check list.

Add Event Processing
	scan buttons = None, ACK, or Snooze

	case 1: Event triggered
		Set up 1 minute timeout.
		Set up 2 second timeout.
		Save EventTime and EventType. [me_lastEvent and eTone]
		Trigger Beep/Tone
		State = 2

	case 2: Wait for any Button - 1 min
		button = ACK?
			yes:	State = ACK
				exit
		button = Snooze?
			yes:	State = Snooze
				Set up 10 min wait
				exit
		1 minute?
			yes: set up 10 min wait. State = 3
			no:	2 second?
				yes: trigger Beep/Tone again

	case 3: Wait - 10 min
		button = ACK?
			yes:	State = ACK
				exit
		button = Snooze?
			yes:	State = Snooze
				exit
		10 minutes?
			yes: ++wait10Min = 3?
				no: set state = 2 4
				yes:	Store Event Time, Snooze time, and <x> tag in EEPROM.
					Resume Sleep cycle.
	
	case 4: Repeat Beeps/Tune for 1 min
		Set up 1 minute timeout.
		Set up 2 second timeout.
		Trigger Beep/Tone
		State = 2

	case Snooze:
		button = ACK?
			yes:	State = ACK
			no:	10 minutes?
				yes: ++wait10Min = 3?
					no: State = 4
					yes:	Store Event Time, Snooze time, and <x> tag in EEPROM.
						Resume Sleep cycle.

	case ACK:
		Store Event Time, Local Time and <x> tag in EEPROM.
		Play ACK tune.
		Resume Sleep cycle.

EEPROM
Need a mod_epLog.c, .h for logging data to EEPROM and retrieving data.
[2]
'D'	Dump EEPROM data
Reads out Tags and Time in ASCII formatted text.
<tag> YYYY-MM-DD HH:MM:SS [YYYY-MM-DD HH:MM:SS]
<tag>
	1	Normal ACK on event. Event time.
	2	Snooze activated. Event time. Final ACK time.
	3	No Action taken within 30 min. Event time.

[2]
'E'	Erase EEPROM
	Zeros EEPROM data.

Store <tag> first, then one or two time_t values. <tag> will determine the number of 
time_t values.
Maintain an me_NextAdrs value to manage storage location.

void me_store(uint8_t tag, time_t event);
void me_store(uint8_t tag, time_t event1, time_t event2);		// Overload function.
void me_getLog(uint8_t init);	// send 0 to reset eeprom address.


Audio (mod_audio.c)
Beep: analysis
To use
call ma_setService( MA_SERVICE_BEEP )
	Sets ma_serviceMode = MA_SERVICE_BEEP
	Sets isrMode = MA_ISR_SQUARE
	Sets TCCR1A and TCCR1B for OCR1A match and fast clock
	Sets toneDeleay = 1;
call ma_setBeepParam( freq, duration, repititions )
	Sets ma_beepFreq = freq (use defined values ONLY)
	Sets ma_beepDuration = duration (in ms)
	Sets ma_beepRepeat (set to 1 if 0)

03may17
Tune: analysis
To use
	eTone != 10, then set eState = 1

	During Awake time (goToSleep = false, eState == 0), the three services are called.
		mod_io_service() - blink LED and scan buttons.
		mod_comms_service() - only effects serial comm.
		ma_service() - will play tune if ma_play_tune = true.

ACK, Snooze, Non-service Modes: analysis
Revamp this into nested state machines.

NEW PROCESS
Initializaton:
eState = PRECHECK

Loop:
	service io
	service comms
	service audio

	if(audioPlaying)
		skipSleep = true;
	else
		skipSleep = false;

	if GoToSleep && !skipSleep
		setup cpu sleep and awake on Timer2 INTR
		// Awake 8 seconds later. Clock is updated in ISR.
		Decide which LED to blink
			if eState = NORMAL, Green
			if eState = PRECHECK, toggle Red-Green
			if eState = SNOOZE_AWAKE or SNOOZE_ASLEEP, Red
			if eState = EVENT_AWAKE or EVENT_ASLEEP, both
	end (else don't go to sleep until audio finishes)

   if(!skipSleep)
	// Only run this block if coming out of Sleep. Simplifies logic.
	switch(eState)
		case NORMAL:
			// Allow for LED blink after waking.
			goToSleep = false;		// use manual control
			if(10ms TIC)
				clear TIC flag
				if(--twoSecondTime == 0)
					twoSecondTime = 20;	// hijack timer for shorter 200ms
					goToSleep = true;	// sleep the 7.8 seconds left.
				end
			end

			eTone = checkEventList();
			if((eTone < 0) || (eTone > 9))	// usually 10 for no event.
				no event
			else
				// Valid Tone/Tune select is 0->9
				triggerBeepTone(eTone);
				// init timers and counters
				oneMinuteTime = 10;	// uses ten second timer
				twoSecondTime = 200;	// uses 10ms TIC
				tenMinTime = 75;	// uses 8 second sleep timer
				tenMinCount = 3;	// maximum nuber of 10 min waits
				tenSecondTime = 1000;	// uses 10ms TIC 
				GoToSleep = false;	// use manual time control
				eState = EVENT_AWAKE
			end
			break;

		case PRECHECK:
			// Waiting for PreCheck ACK. Check for 2 seconds after waking.
			goToSleep = false;		// use manual control
			if(10ms TIC)
				clear TIC flag
				if(--twoSecondTime == 0)
					twoSecondTime = 200;
					goToSleep = true;	// sleep the 6 seconds left.
				end
			end
			// ACK is checked for 2 seconds after 8s wakeup.
			buttons = getButtons()
			if(B_ACK)
				clear audio (stop any beep/tune)
				triggerBeep(0)
				eState = NORMAL
				goToSleep = true.	// Go back to sleep
			end
			break;

		case EVENT_AWAKE:
			// under manual control, not sleeping
			// Processing EVENT Trigger
			// ACK or Snooze button can be pressed an ANY time.
			buttons = getButtons()
			if(B_ACK)
				clear audio (stop any beep/tune)
				triggerBeep(0)
				Store Event to log as EPT_ACK,eventTime.
				eState = NORMAL
				goToSleep = true.	// Go back to sleep
				break;
			end

			if(B_SNOOZE)
				clear audio (stop any beep/tune)			
				triggerBeep(0)
				// Wait until Snooze ends or is ACK'd to store to Log.
				eState = SNOOZE_ASLEEP
				// Timers and counter have already been setup.
				goToSleep = true.	// Go back to sleep while in Snooze
				break;
			end

			// Play tune every 10 seconds
			// After 1 minute. go to sleep for 10 minutes. repeat 3 times.
			if(10ms TIC)
				clear TIC flag
				if( --tenSecondTime == 0)
					// ten seconds timer out. Play tune/tone every 10 seconds.
					tenSecondTime = 1000;
					triggerBeepTune(eTone);

					if( --oneMinuteTime == 0)
						// one minute time out
						oneMinuteTime = 10;
						// No respose. Go to sleep for 10 minutes.
						twoSecondTime = 200;
						tenMinTime = 75;	// uses 8 second sleep timer
						eState = EVENT_ASLEEP;
						goToSleep = true;
					end
				end
			end
			break;

		case EVENT_ASLEEP:
			// allow 2 seconds to detect ACK or Snooze button, then go to sleep
			// for the remaining 6 seconds.
			if(twoSecondTime != 0)
				// ACK or Snooze button can be pressed within 2 seconds after awake.
				buttons = getButtons()
				if(B_ACK)
					clear audio (stop any beep/tune)
					triggerBeep(0)
					Store Event to log as EPT_ACK,eventTime.
					eState = NORMAL
					goToSleep = true.	// Go back to sleep
					break;
				end

				if(B_SNOOZE)
					clear audio (stop any beep/tune)			
					triggerBeep(0)
					// Wait until Snooze ends or is ACK'd to store to Log.
					eState = SNOOZE
					// Timers and counter have already been setup.
					goToSleep = true.	// Go back to sleep while in Snooze
					break;
				end
				--twoSecondTime;
				goToSleep = false;		// manual control for 2 seconds.
			else
				// decrement time and counts on wake up
				if(--tenMinTime == 0)
					tenMinTime = 75
					// ten minute time out
					if(--tenMinCount == 0)
						// gone through 3 ten minute periods. Log it.
						log EPT_NOACTION, time
						eState = NORMAL
					else
						triggerBeepTune(eTone)	// beep/tune again after 10 min
					end
				end
				goToSleep = true;
			end
			break;

		case SNOOZE_AWAKE:
			// Only Snooze for 10 min. No button checks.
			// Check ACK for 2 seconds after waking.
			goToSleep = false;		// use manual control
			// ACK is checked for 1 minute after 8s wakeup while playing tune.
			buttons = getButtons()
			if(B_ACK)
				clear audio (stop any beep/tune)
				triggerBeep(0)
				Store Event to log as EPT_SNOOZE,eventTime.
				eState = NORMAL
				goToSleep = true.	// Go back to sleep
				break;
			end

			// Play tune every 10 seconds
			// After 1 minute. go to sleep for 10 minutes.
			if(10ms TIC)
				clear TIC flag
				if( --tenSecondTime == 0)
					// ten seconds timer out. Play tune/tone every 10 seconds.
					tenSecondTime = 1000;
					triggerBeepTune(eTone);

					if( --oneMinuteTime == 0)
						// one minute time out
						oneMinuteTime = 10;
						// No respose. Go to sleep for 10 minutes.
						twoSecondTime = 200;
						tenMinTime = 75;	// uses 8 second sleep timer
						eState = SNOOZE_ASLEEP;
						goToSleep = true;
					end
				end
			end
			break;

		case SNOOZE_ASLEEP:
			// Stay asleep for 10 seconds more
			// decrement time and counts on wake up
			if(--tenMinTime == 0)
				// ten minute time out
				tenMinTime = 75;
				triggerBeepTune(eTone)	// beep/tune again after 10 min
				eState = SNOOZE_AWAKE;
			end
			goToSleep = true;
			break;

		default:
			eState = NORMAL;
			goToSleep = true;
					
  end (!skipSleep)





