
pwmTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000092  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f7  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014b  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000051b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:


int main(void)
{
	// Set up Timer0. Set OC0A at BOTTOM:Clear OC0A on OCR0A Match, Fast PWM(3)
	TCCR0A |= (1<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (1<<WGM00);
  94:	84 b5       	in	r24, 0x24	; 36
  96:	83 68       	ori	r24, 0x83	; 131
  98:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<WGM02) | (0<<CS12) | (0<<CS11) | (1<<CS10);	// Clk/1
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	85 bd       	out	0x25, r24	; 37
//	TCCR0B |= (0<<WGM02) | (0<<CS12) | (1<<CS11) | (0<<CS10);	// Clk/8
//	TCCR0B |= (0<<WGM02) | (0<<CS12) | (1<<CS11) | (1<<CS10);	// Clk/64
	OCR0A = 0x40;			// 64/256 duty cycle
  a0:	90 e4       	ldi	r25, 0x40	; 64
  a2:	97 bd       	out	0x27, r25	; 39
	// Set I/O for output
	DDRB |= (1<<PORTB3);	// set as output.
  a4:	23 9a       	sbi	0x04, 3	; 4

	// Set up Timer1. Set OC1A at BOTTOM:Clear OC1A on OCR1A Match, Fast PWM 8-bit(5)
	TCCR1A |= (1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 68       	ori	r24, 0x81	; 129
  ae:	80 83       	st	Z, r24
	TCCR1B |= (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);	// Clk/1
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	89 60       	ori	r24, 0x09	; 9
  b8:	80 83       	st	Z, r24
//	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);	// Clk/8
//	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);	// Clk/64
	OCR1A = 0x0040;
  ba:	20 e4       	ldi	r18, 0x40	; 64
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// Set I/O for output
	DDRD |= (1<<PORTD5);	// set as output.
  c6:	55 9a       	sbi	0x0a, 5	; 10

	// Set up Timer2. Set OC2A at BOTTOM:Clear OC2A on OCR2A Match, Fast PWM(3)
	TCCR2A |= (1<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (1<<WGM20);
  c8:	e0 eb       	ldi	r30, 0xB0	; 176
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	83 68       	ori	r24, 0x83	; 131
  d0:	80 83       	st	Z, r24
	TCCR2B |= (0<<WGM22) | (0<<CS22) | (0<<CS21) | (1<<CS20);	// Clk/1
  d2:	e1 eb       	ldi	r30, 0xB1	; 177
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
//	TCCR2B |= (0<<WGM22) | (0<<CS22) | (1<<CS21) | (0<<CS20);	// Clk/8
//	TCCR2B |= (0<<WGM22) | (0<<CS22) | (1<<CS21) | (1<<CS20);	// Clk/32
	OCR2A = 0x0040;
  dc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set I/O for output
	DDRD |= (1<<PORTD7);	// set as output.
  e0:	57 9a       	sbi	0x0a, 7	; 10


    /* Replace with your application code */
    while (1) 
    {
		asm("NOP");
  e2:	00 00       	nop
    }
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x4e>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
